1. Настройка окружения (Poetry)

1.1 Установка Poetry на комп
(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -
poetry --version

1.2. к уже существующему проекту
poetry init создастся файл pyproject.toml 

1.2 .новый проект
poetry install появится папка виртуального окружения (будет лежать нужная версия питона)

1.3. установка пакетов
poetry add <имя_пакета>

1.4. скачать пакеты
poetry update



################################################################################


2. Работаем с fastapi

2.1. Установка fastapi
poetry add fastapi[all]



################################################################################



5. Добавление таблиц в БД

5.1 Создаем таблицу Users в файле models.py 
from sqlalchemy import Column, Integer, String, Boolean
from app.database import Base

class Users(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    email = Column(String, unique=True)
    password = Column(String)


5.2. Миграции через alembic
5.2.1. Это делаем изначально, создастся папка migration и файлик alembic.ini
alembic init migration 

5.2.2. Делаем ревизию (на этом этапе в БД еще не появится таблица)
alembic revision --autogenerate -m "add table users"

5.2.3. Добавляем изменения в БД
alembic upgrade <код ревизии>
или
alembic upgrade head    ### head - это изменить всё




################################################################################



7. Авторизация и аутентификация
7.1. poetry add passlib python-jose


7.2. в файле auth.py
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict) -> str:
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + timedelta(minutes=2)
    to_encode.update({'exp': expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY_JWT, settings.ALGORITHM_JWT)
    return encoded_jwt

async def authenticate_user(email: EmailStr, password: str):
    user = await UsersDAO.find_one_or_none(email=email)
    if not user and not verify_password(password, user.hashed_password):
        raise None
    return user

7.3. Для генерации секретного ключа
from base64 import b64encode
from secrets import token_bytes

print(b64encode(token_bytes(32).decode()))





8. Docker
8.0. допом установим библиотеку gunicorn - нужна что бы запускать fastAPI в контейнере
poetry add gunicorn

8.1. Подготовим все зависимости в файле  requirements.txt
pip freeze > requirements.txt

8.2. У тех кто на винде будет ошибка, надо что то дописать, у него это строка записана так ...
pywin32==305; platform_system=='Windows'

8.3. Создаем файл Dockerfile

8.4. Пишем в Dockerfile
FROM python:3.12 #установим пайтон
RUN mkdir /tp_app_fastapi #создадим папку для приложения
WORKDIR /tp_app_fastapi #перейдем в папку  нашего приложения
COPY requirements.txt . #специально скопируем отдельно файл с зависимостями, что б он там закэшировался
RUN pip install -r requirements.txt # установим библиотеки
COPY . . # скопируем наше приложение
CMD [ "gunicorn", "app.main:app", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--bind=0.0.0.0:8000" ]

8.5. Билдим образ на основе файла Dockerfile
docker build .

8.6. Просмотреть список образов
docker images

8.7.
docker run -p 9000:8000 <image id образа> 

8.8.
docker-compose.yml

